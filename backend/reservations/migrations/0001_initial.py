# Generated by Django 4.2.22 on 2025-07-08 01:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('line_user_id', models.CharField(blank=True, help_text='LINEでの通知や連携に使用する一意のIDです。', max_length=255, null=True, unique=True, verbose_name='LINEユーザーID')),
                ('name', models.CharField(max_length=100, verbose_name='氏名')),
                ('email', models.EmailField(blank=True, help_text='顧客を一意に識別するために使用します。', max_length=254, null=True, unique=True, verbose_name='メールアドレス')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='電話番号')),
                ('line_display_name', models.CharField(blank=True, help_text='LINEプロフィールの表示名です。', max_length=100, verbose_name='LINE表示名')),
                ('line_picture_url', models.URLField(blank=True, max_length=2048, verbose_name='LINEプロフィール画像URL')),
                ('notes', models.TextField(blank=True, help_text='顧客に関するメモなどを記載します。', verbose_name='備考')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unconfirmed_reminder_enabled', models.BooleanField(default=True, verbose_name='【管理者向け】予約未確定リマインダーを有効にする')),
                ('unconfirmed_reminder_days_before', models.IntegerField(default=2, help_text='予約日の何日前に管理者にリマインドを送信するか設定します（1〜14日）。', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(14)], verbose_name='リマインド日数（X日前に通知）')),
                ('schedule_reminder_enabled', models.BooleanField(default=False, verbose_name='【管理者向け】スケジュールリマインダーを有効にする')),
                ('schedule_reminder_days_before', models.IntegerField(default=1, help_text='何日後までの予約状況をリマインドするか設定します（1〜7日）。', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)], verbose_name='リマインド日数（X日前に通知）')),
            ],
            options={
                'verbose_name': '通知設定',
                'verbose_name_plural': '通知設定',
            },
        ),
        migrations.CreateModel(
            name='Salon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=20)),
                ('cancellation_deadline_days', models.IntegerField(default=2, help_text='予約日の何日前までお客様自身でのキャンセルを許可するか設定します。0を指定すると当日まで可能です。', validators=[django.core.validators.MinValueValidator(0)], verbose_name='キャンセル受付期限（日数）')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_user_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('line_registration_token', models.UUIDField(blank=True, default=uuid.uuid4, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='reservations_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='reservations_user_permissions_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=0, max_digits=8)),
                ('duration_minutes', models.IntegerField(choices=[(30, '30 分'), (60, '60 分'), (90, '90 分'), (120, '120 分'), (150, '150 分'), (180, '180 分'), (210, '210 分'), (240, '240 分')], verbose_name='所要時間(分)')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='reservations.salon')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_number', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('status', models.CharField(choices=[('pending', '保留中'), ('confirmed', '確定済み'), ('cancelled', 'キャンセル済み')], default='pending', max_length=20)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservations', to='reservations.customer', verbose_name='顧客')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='reservations.salon')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservations.service')),
            ],
        ),
        migrations.CreateModel(
            name='DateSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True, verbose_name='日付')),
                ('is_closed', models.BooleanField(default=False, verbose_name='休業日')),
                ('opening_time', models.TimeField(blank=True, null=True, verbose_name='開店時間')),
                ('closing_time', models.TimeField(blank=True, null=True, verbose_name='閉店時間')),
                ('is_holiday', models.BooleanField(default=False)),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date_schedules', to='reservations.salon', verbose_name='サロン')),
            ],
            options={
                'verbose_name': '特別スケジュール',
                'verbose_name_plural': '特別スケジュール',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='AvailableTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='日付')),
                ('time', models.TimeField(verbose_name='時間')),
            ],
            options={
                'verbose_name': '予約可能時間枠',
                'verbose_name_plural': '予約可能時間枠',
                'ordering': ['date', 'time'],
                'unique_together': {('date', 'time')},
            },
        ),
        migrations.CreateModel(
            name='WeeklyDefaultSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, '月曜日'), (1, '火曜日'), (2, '水曜日'), (3, '木曜日'), (4, '金曜日'), (5, '土曜日'), (6, '日曜日')], verbose_name='曜日')),
                ('is_closed', models.BooleanField(default=False, verbose_name='休業日')),
                ('opening_time', models.TimeField(blank=True, null=True, verbose_name='開店時間')),
                ('closing_time', models.TimeField(blank=True, null=True, verbose_name='閉店時間')),
                ('is_holiday', models.BooleanField(default=False)),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_schedules', to='reservations.salon', verbose_name='サロン')),
            ],
            options={
                'verbose_name': '基本スケジュール',
                'verbose_name_plural': '基本スケジュール',
                'ordering': ['day_of_week'],
                'unique_together': {('salon', 'day_of_week')},
            },
        ),
    ]
